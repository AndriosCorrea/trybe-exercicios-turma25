/*üöÄ 1. Altere o tipo das vari√°veis(var) para let ou const para que respeitem o escopo em que foram declaradas, e altere a fun√ß√£o utilizando arrow function e template literals.
Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function;
Modifique as vari√°veis para que respeitem o escopo onde est√£o declaradas;
Modifique as concatena√ß√µes para template literals.
*/
// const testingScope = escopo => {
//     if (escopo === true) {
//       let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
//       ifScope = `${ifScope} √≥timo, fui utilizada no escopo!`;
//       console.log(ifScope);
//     } else {
//       const elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
//       console.log(elseScope);
//     }
    
//   }

//   testingScope(true);

// üöÄ2. Crie uma fun√ß√£o que retorne um array em ordem crescente.

/* - Crie uma fun√ß√£o que fa√ßa com que o array oddsAndEvens fique em ordem crescente;
 - Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>); retorne a frase "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".
 - B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todo array.sort(). Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.
*/

// const oddsAndEvens = [13, 3, 4, 10, 7, 2];

// const sortOddsAndEvens = () => {
//   oddsAndEvens[0] = 2;
//   oddsAndEvens[1] = 3;
//   oddsAndEvens[2] = 4;
//   oddsAndEvens[3] = 7; 
//   oddsAndEvens[4] = 10;
//   oddsAndEvens[5] = 13;

//   return oddsAndEvens;
// };

// const sortedArray = sortOddsAndEvens();
// console.log(`Os n√∫meros ${sortedArray} se encontram ordenados de forma crescente!`); 


/* Abaixo, voc√™ ver√° algumas especifica√ß√µes de algoritmos para desenvolver. √â fundamental que voc√™ utilize o que aprendeu sobre let, const, arrow functions, template literals e ternary operator.

 1. Crie uma fun√ß√£o que receba um n√∫mero e retorne seu fatorial.
 -  Na matem√°tica, o fatorial de um n√∫mero inteiro e positivo N, representado por N!, √© o produto de todos os seus antecessores at√© o n√∫mero um. Exemplo: 4! = 4 * 3 * 2 * 1 = 24.
Com base nessas informa√ß√µes:
 - Crie a fun√ß√£o factorial que recebe um n√∫mero como par√¢metro, utilizando arrow functions (Lembre-se de armazenar a fun√ß√£o utilizando o tipo de vari√°vel correta).
 - Dentro da fun√ß√£o crie uma vari√°vel result.
 - Crie a l√≥gica para retornar o fatorial de N!.
 - Imprima no terminal "Esse √© o fatorial resultado da fun√ß√£o" (Lembre-se de utilizar template literals nesse momento).

Dica: Armazene a chamada da fun√ß√£o em uma var√≠avel para imprimir no terminal seu resultado.
B√¥nus: tente fazer o mesmo exerc√≠cio de forma recursiva. Spoiler: √â poss√≠vel resolver com uma linha usando ternary operator.*/

// const factorial = number => {
//     let result = 1;

//     for (let index = 2; index <= number; index += 1) {
//           result *= index;
        
//         }
//         return result;
// }

// const print = factorial(10); 

// console.log(`Esse √© o fatorial ${print}`);

// 2. Crie uma fun√ß√£o que receba uma frase como par√¢metro e retorne a maior palavra da frase.

// const longestWord = (text) => {
//   const wordArray = text.split(' ');
//   let maxLength = 0;
//   let result = '';

//   for (const word of wordArray) {
//       if (word.length > maxLength) {
//           maxLength = word.length;
//           result = word;
//       }
//   }

//   return result;
// }

// console.log(longestWord('Antonio foi ao banheiro e n√£o sabemos o que aconteceu'));

// Exercicio 3 esta em exercicio3-dia1.html

/* üöÄ 4.  Crie duas fun√ß√µes JavaScript com as seguintes especifica√ß√µes:
N√£o se esque√ßa de usar template literals

 - Fun√ß√£o 1: Escreva uma fun√ß√£o que substitua a letra 'x' em uma frase.

 - O nome da fun√ß√£o dever√° ser substituaX;
 - A fun√ß√£o dever√° receber um nome por par√¢metro;
 - Declare dentro da fun√ß√£o uma vari√°vel do tipo const, com o nome frase, atribuindo o valor 'Tryber x aqui!';
 - A fun√ß√£o dever√° retornar uma nova frase onde o x da frase 'Tryber x aqui!' seja substitu√≠do pelo nome passado por par√¢metro.

 Exemplo:

 - Par√¢metro: 'Bebeto'
 - Retorno: 'Tryber Bebeto aqui!'
Spoiler: O m√©todo split() pode ser utilizado de diferentes maneiras, como separar as palavras de um texto.

 - Fun√ß√£o 2: Escreva uma fun√ß√£o que ir√° receber o retorno da Fun√ß√£o 1 por par√¢metro e retornar√° uma nova string.

 - O nome da fun√ß√£o dever√° ser minhasSkills;
 - A fun√ß√£o dever√° receber o retorno da Fun√ß√£o 1 - substituaX por par√¢metro;
 - Declare dentro da fun√ß√£o uma vari√°vel com o nome skills, do tipo const;
 - A vari√°vel skills dever√° ser um array contendo tr√™s strings com tecnologias que voc√™ j√° aprendeu.
 - Crie uma var√°vel do tipo let e concatene o valor retornado da Fun√ß√£o 1 - substituaX (utilize template literals), a frase 'Minhas tr√™s principais habilidades s√£o:' e o valor da vari√°vel skills.

 Exemplo de retorno:

Tryber Bebeto aqui!
Minhas tr√™s principais habilidades s√£o:
JavaScript
HTML
CSS
*/
